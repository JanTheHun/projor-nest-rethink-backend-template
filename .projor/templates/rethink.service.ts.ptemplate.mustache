{
    "map": {
        "entities": "entities"
    },
    "filename": "src/rethink/rethink.service.ts"
  }
---
import { Injectable, Inject } from "@nestjs/common";
import * as rethink from "rethinkdb"

@Injectable()
export class RethinkService {

    private connection: rethink.Connection

    constructor(@Inject('RethinkProvider') connection) {
        this.connection = connection
    }

    /**
     * Creates a new table in the RethinkDB instance
     * @param tableName Name of the new Table
     * @returns Creation status promise
     */
    async createTable(tableName:string): Promise<rethink.CreateResult> {
        let result = await rethink.db('test').tableCreate(tableName).run(this.connection)
        return result
    }

    /**
     * Inserts data in the specified table
     * @param tableName Table where insert data
     * @param content Data to insert
     */
    async insertEntity(tableName:string, content:object): Promise<rethink.WriteResult> {
        let result = await rethink
            .db('test')
            .table(tableName)
            .insert(content)
            .run(this.connection)
    
        return result
    }

    async readEntity(tableName:string, id: number): Promise<rethink.WriteResult> {
        let result = await rethink
            .db('test')
            .table(tableName).get(id)
            .run(this.connection)    
        return result
    }

    async updateEntity(tableName:string, id: number, content:object): Promise<rethink.WriteResult> {
        let result = await rethink
            .db('test')
            .table(tableName).get(id)
            .update(content)
            .run(this.connection)
        return result
    }

    async deleteEntity(tableName:string, id: number): Promise<rethink.WriteResult> {
        let result = await rethink
            .db('test')
            .table(tableName).get(id)
            .delete()
            .run(this.connection)    
        return result
    }

    async readTable(tableName:string, id: string = null): Promise<rethink.Cursor> {
        let result = await rethink.db('test').table(tableName).run(this.connection)
        return result.toArray()
    }

    async dropTable(tableName:string): Promise<rethink.DropResult> {
        let result = await rethink.db('test').tableDrop(tableName).run(this.connection)
        return result
    }

    async listTables(): Promise<rethink.DropResult> {
        let result = await rethink.db('test').tableList().run(this.connection)
        return result
    }

    subscribeToFeed(tableName:string, callback:Function): void {
        rethink.db('test').table(tableName).changes().run(this.connection, (err, cursor) => {
            cursor && cursor.each((err, row) => {
                callback(row)
            })
        })
    }

}
