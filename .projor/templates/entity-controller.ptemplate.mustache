{
    "forEach": "entities",
    "filename": "src/EntityModules/{{kebabCase name}}/{{kebabCase name}}.controller.ts",
    "formatUsing": "typescript"
}
---
import { Controller, Post, Param, Get, Body, Delete, Put } from '@nestjs/common';
import { RethinkService } from '../../rethink/rethink.service';
import { {{pascalCase name}}Service } from './{{kebabCase name}}.service';

@Controller('{{kebabCase name}}')
export class {{pascalCase name}}Controller {
  constructor(
		private readonly rethinkService: RethinkService,
		private {{camelCase name}}Service: {{pascalCase name}}Service ) {
			this.{{camelCase name}}Service.hello()
		}
    
  @Get()
  async readTable(): Promise<any> {
	let response = await this.rethinkService.readTable("{{kebabCase name}}")
      .then(result => {
        return JSON.stringify(result)
      })
      .catch(reason => {
        return reason
      })
  
    return response;
	}

  @Get("/:id")
  async readEntity(@Param("id") id): Promise<any> {
	let response = await this.rethinkService.readEntity("{{kebabCase name}}", id)
      .then(result => {
        return JSON.stringify(result)
      })
      .catch(reason => {
        return reason
      })
  
    return response;
	}
		
	@Post()
	async createEntity(@Body() data): Promise<any> {
		if (data.id) {
			await this.rethinkService.updateEntity("{{kebabCase name}}", data.id, data)
				.then(result => {
					return JSON.stringify(result)
				})
				.catch(reason => {
					return reason
				})
		} else {
			const { id, ...newEntity } = data
			await this.rethinkService.insertEntity("{{kebabCase name}}", newEntity)
				.then(result => {
					return JSON.stringify(result)
				})
				.catch(reason => {
					return reason
				})
		}
	}
		
	@Put()
	async createTable(): Promise<any> {
		await this.rethinkService.createTable("{{kebabCase name}}")
			.then(result => {
				return JSON.stringify(result)
			})
			.catch(reason => {
				return reason
			})
	}
		
	@Post("/:id")
	async updateEntity(@Param("id") id, @Body() data): Promise<any> {
		await this.rethinkService.updateEntity("{{kebabCase name}}", id, data)
			.then(result => {
				return JSON.stringify(result)
			})
			.catch(reason => {
				return reason
			})
	}
		
	@Delete("/:id")
	async deleteTable(@Param("id") id): Promise<any> {
		await this.rethinkService.deleteEntity("{{kebabCase name}}", id)
			.then(result => {
				return JSON.stringify(result)
			})
			.catch(reason => {
				return reason
			})
	}
}